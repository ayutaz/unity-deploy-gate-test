name: Unity Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UNITY_VERSION: '6000.0.43f1'
  # FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }} # Unused

jobs:
  # Android向けビルドとデプロイジョブ
  build-android:
    name: Build and Deploy Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Free disk space
        run: |
          sudo swapoff -a && sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/.ghcup
          sudo apt-get remove -y google-cloud-cli || sudo apt-get remove -y google-cloud-sdk
          sudo apt-get autoremove -y && sudo apt-get clean
          docker system prune -af
          df -h

      - name: Clean up Docker space
        run: docker system prune --volumes -a -f

      - name: Cache Unity Library - Android
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Android-

      - name: Build Android App
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: Android
          buildsPath: build
          buildName: MyAndroidApp
          androidExportType: androidPackage
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Upload Android Build Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-Android
          path: build/Android/MyAndroidApp.apk

      - name: Upload to DeployGate (Android)
        uses: DeployGate/deploygate-upload-github-action@v1.0.0
        with:
          api_token: ${{ secrets.DEPLOYGATE_API_KEY }}
          owner_name: ${{ secrets.DEPLOYGATE_USER_NAME }}
          file_path: build/Android/MyAndroidApp.apk
          message: "New Android build from GitHub Actions"

  #=======================================
  # iOS向けビルドとデプロイジョブ (Secretsでplist生成 + Profile手動インストール)
  #=======================================
  build-ios:
    name: Build and Deploy iOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Cache Unity Library - iOS
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-iOS-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-iOS-

      - name: Build iOS Project (Xcode)
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: iOS
          buildsPath: build
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Import Code Signing Certificates (.p12 only)
        # このステップでは .p12 (証明書+秘密鍵) のインポートのみを期待する
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}

      # ★★★ プロビジョニングプロファイルを手動でデコード・インストールするステップ (修正版) ★★★
      - name: Install Provisioning Profile from Secret
        env:
          MOBILEPROVISION_BASE64: ${{ secrets.IOS_MOBILEPROVISION_BASE64 }}
        run: |
          echo "Attempting to install provisioning profile manually..."
          PROF_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROF_DIR" # ディレクトリが存在しない場合に作成

          # base64デコードとプロファイルのインストール
          echo "$MOBILEPROVISION_BASE64" | base64 -D -o "$PROF_DIR/actions_profile.mobileprovision"
          
          # プロファイルのUUIDを取得
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i "$PROF_DIR/actions_profile.mobileprovision"))
          echo "Installed provisioning profile UUID: $UUID"
          
          # プロファイルの存在確認
          if [ -f "$PROF_DIR/actions_profile.mobileprovision" ]; then
            echo "Provisioning profile installed successfully"
            ls -l "$PROF_DIR"
          else
            echo "::error::Failed to install provisioning profile"
            exit 1
          fi
          sleep 1

      # ExportOptions.plist を Secrets から動的に生成するステップ
      - name: Generate ExportOptions.plist from Secrets
        env:
          APPLE_TEAM_ID_SECRET: ${{ secrets.APPLE_TEAM_ID }}
          IOS_BUNDLE_ID_SECRET: ${{ secrets.IOS_BUNDLE_ID }}
          IOS_PROVISIONING_PROFILE_NAME_SECRET: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
        run: |
          echo "Generating ExportOptions.plist..."
          PLIST_PATH="${{ github.workspace }}/ExportOptions.plist"

          cat << EOF > "${PLIST_PATH}"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>${APPLE_TEAM_ID_SECRET}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${IOS_BUNDLE_ID_SECRET}</key>
                  <string>${IOS_PROVISIONING_PROFILE_NAME_SECRET}</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF

          echo "Generated ExportOptions.plist at ${PLIST_PATH}"
          echo "EXPORT_OPTIONS_PLIST_PATH=${PLIST_PATH}" >> $GITHUB_ENV

      - name: Build and Export .ipa
        env:
           APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          XCODE_PROJECT_PATH="${{ github.workspace }}/build/iOS/iOS/Unity-iPhone.xcodeproj"
          ARCHIVE_PATH="${{ github.workspace }}/build/iOS/archive.xcarchive"
          EXPORT_PATH="${{ github.workspace }}/build/iOS/ipa"
          PLIST_PATH="${{ env.EXPORT_OPTIONS_PLIST_PATH }}" # 前のステップで設定された plist パスを取得

          echo "Archiving Xcode project from: ${XCODE_PROJECT_PATH}"
          if [ ! -d "${XCODE_PROJECT_PATH}" ]; then
            echo "::error::Xcode project not found at specified path: ${XCODE_PROJECT_PATH}"
            exit 1
          fi

          xcodebuild archive \
            -project "${XCODE_PROJECT_PATH}" \
            -scheme Unity-iPhone \
            -sdk iphoneos \
            -archivePath "${ARCHIVE_PATH}" \
            CODE_SIGN_STYLE="Manual" \
            DEVELOPMENT_TEAM="${{ env.APPLE_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="$IOS_PROVISIONING_PROFILE_NAME_SECRET" \
            CODE_SIGN_IDENTITY="$IOS_CODE_SIGN_IDENTITY" \
            PROVISIONING_PROFILE="$UUID"
          echo "Exporting .ipa using generated plist: ${{ env.EXPORT_OPTIONS_PLIST_PATH }}"
          xcodebuild -exportArchive \
            -archivePath "${ARCHIVE_PATH}" \
            -exportPath "${EXPORT_PATH}" \
            -exportOptionsPlist "${PLIST_PATH}" # 動的に生成した plist を使用

          IPA_PATH=$(find "${EXPORT_PATH}" -maxdepth 1 -name "*.ipa" | head -n 1)
          if [[ -z "$IPA_PATH" ]]; then
            echo "::error::IPA file not found in ${EXPORT_PATH} after exportArchive."
            # デバッグ用に export ディレクトリの内容を表示
            echo "Contents of ${EXPORT_PATH}:"
            ls -lR "${EXPORT_PATH}" || echo "Could not list ${EXPORT_PATH}"
            exit 1
          fi
          echo "IPA_PATH=${IPA_PATH}" >> $GITHUB_ENV
          echo "IPA generated at: ${IPA_PATH}"

      - name: Upload iOS Build Artifact (.ipa)
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-iOS-ipa
          path: ${{ env.IPA_PATH }}

      - name: Upload to DeployGate (iOS)
        uses: DeployGate/deploygate-upload-github-action@v1.0.0
        with:
          api_token: ${{ secrets.DEPLOYGATE_API_KEY }}
          owner_name: ${{ secrets.DEPLOYGATE_USER_NAME }}
          file_path: ${{ env.IPA_PATH }}
          message: "New iOS build from GitHub Actions (via dynamic plist & manual profile install)"