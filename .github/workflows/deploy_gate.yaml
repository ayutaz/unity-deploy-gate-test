name: Unity Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UNITY_VERSION: '6000.0.43f1'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  # Android向けビルドとデプロイジョブ
  build-android:
    name: Build and Deploy Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # ディスク容量の確保
      - name: Free disk space
        run: |
          sudo swapoff -a && sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc /usr/local/.ghcup
          sudo apt-get remove -y google-cloud-cli || sudo apt-get remove -y google-cloud-sdk
          sudo apt-get autoremove -y && sudo apt-get clean
          docker system prune -af
          df -h

      - name: Clean up Docker space
        run: docker system prune --volumes -a -f

      - name: Cache Unity Library - Android
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Android-

      - name: Build Android App
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: Android
          buildsPath: build
          buildName: MyAndroidApp
          androidExportType: androidPackage
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Upload Android Build Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-Android
          path: build/Android/MyAndroidApp.apk

      - name: Upload to DeployGate using Action
        uses: DeployGate/deploygate-upload-github-action@v1.0.0
        with:
          api_token: ${{ secrets.DEPLOYGATE_API_KEY }}
          owner_name: ${{ secrets.DEPLOYGATE_USER_NAME }}
          file_path: build/Android/MyAndroidApp.apk
          message: "New build from GitHub Actions (using action)"

  build-ios:
    name: Build and Deploy iOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Cache Unity Library - iOS
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-iOS-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-iOS-

      - name: Build iOS Project (Xcode)
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: iOS
          buildsPath: build
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
          mobileprovision-base64: ${{ secrets.IOS_MOBILEPROVISION_BASE64 }}

      
      - name: List build output directory # ★★★ このデバッグステップを追加 ★★★
        run: |
          echo "Checking contents of build/iOS directory..."
          pwd # 現在のディレクトリを確認
          echo "Listing contents of build/ :"
          ls -l build || echo "build directory not found."
          echo "Listing contents of build/iOS/ :"
          ls -lR build/iOS || echo "build/iOS directory not found or empty."

      # ExportOptions.plist を Secrets から動的に生成するステップ
      - name: Generate ExportOptions.plist from Secrets
        env:
          # Secrets を環境変数として渡す
          APPLE_TEAM_ID_SECRET: ${{ secrets.APPLE_TEAM_ID }}
          IOS_BUNDLE_ID_SECRET: ${{ secrets.IOS_BUNDLE_ID }}
          IOS_PROVISIONING_PROFILE_NAME_SECRET: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
        run: |
          echo "Generating ExportOptions.plist..."
          PLIST_PATH="${{ github.workspace }}/ExportOptions.plist" # 保存パス

          # cat と HERE ドキュメントで plist の内容を生成
          cat << EOF > "${PLIST_PATH}"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>${APPLE_TEAM_ID_SECRET}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${IOS_BUNDLE_ID_SECRET}</key>
                  <string>${IOS_PROVISIONING_PROFILE_NAME_SECRET}</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF

          echo "Generated ExportOptions.plist at ${PLIST_PATH}"

          # 生成した plist のパスを後続ステップ用に環境変数に設定
          echo "EXPORT_OPTIONS_PLIST_PATH=${PLIST_PATH}" >> $GITHUB_ENV

      - name: Build and Export .ipa
        env:
           APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
           IOS_PROVISIONING_PROFILE_NAME_SECRET: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
        run: |
          XCODE_PROJECT_PATH="${{ github.workspace }}/build/iOS/iOS/Unity-iPhone.xcodeproj"
          ARCHIVE_PATH="${{ github.workspace }}/build/iOS/archive.xcarchive"
          EXPORT_PATH="${{ github.workspace }}/build/iOS/ipa"

          echo "Archiving Xcode project from: ${XCODE_PROJECT_PATH}"
          if [ ! -d "${XCODE_PROJECT_PATH}" ]; then
            echo "::error::Xcode project not found at specified path: ${XCODE_PROJECT_PATH}"
            exit 1
          fi

          # ★★★ PROVISIONING_PROFILE_SPECIFIER="$IOS_PROVISIONING_PROFILE_NAME_SECRET" を追加 ★★★
          echo "Using Profile Name: $IOS_PROVISIONING_PROFILE_NAME_SECRET" # 確認用ログ
          xcodebuild archive \
            -project "${XCODE_PROJECT_PATH}" \
            -scheme Unity-iPhone \
            -sdk iphoneos \
            -archivePath "${ARCHIVE_PATH}" \
            CODE_SIGN_STYLE="Manual" \
            DEVELOPMENT_TEAM="${{ env.APPLE_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="$IOS_PROVISIONING_PROFILE_NAME_SECRET"

          # ---- これ以降の exportArchive や find コマンドは変更なし ----
          echo "Exporting .ipa using generated plist: ${{ env.EXPORT_OPTIONS_PLIST_PATH }}"
          xcodebuild -exportArchive \
            -archivePath "${ARCHIVE_PATH}" \
            -exportPath "${EXPORT_PATH}" \
            -exportOptionsPlist "${{ env.EXPORT_OPTIONS_PLIST_PATH }}" # 動的に生成した plist を使用 (またはリポジトリ内のパス)

          IPA_PATH=$(find "${EXPORT_PATH}" -maxdepth 1 -name "*.ipa" | head -n 1)
          if [[ -z "$IPA_PATH" ]]; then
            echo "::error::IPA file not found in ${EXPORT_PATH}"
            exit 1
          fi
          echo "IPA_PATH=${IPA_PATH}" >> $GITHUB_ENV
          echo "IPA generated at: ${IPA_PATH}"

      - name: Upload iOS Build Artifact (.ipa)
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-iOS-ipa
          path: ${{ env.IPA_PATH }}

      - name: Upload to DeployGate (iOS)
        uses: DeployGate/deploygate-upload-github-action@v1.0.0
        with:
          api_token: ${{ secrets.DEPLOYGATE_API_KEY }}
          owner_name: ${{ secrets.DEPLOYGATE_USER_NAME }}
          file_path: ${{ env.IPA_PATH }}
          message: "New iOS build from GitHub Actions (via dynamic plist)"
          # distribution_key: ${{ secrets.DEPLOYGATE_DISTRIBUTION_KEY_IOS }} # 必要なら配布ページキーを指定